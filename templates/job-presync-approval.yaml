{{- if .Values.argocd.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: presync-approval-job
  namespace: argocd
  labels:
    app: presync-approval
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
        - name: local-tmp
          hostPath:
            path: /tmp/presync
      containers:
        - name: wait-for-approval
          image: gora04/mini-deb:v1
          volumeMounts:
            - name: local-tmp
              mountPath: /tmp/presync
          env:
            - name: SLACK_BOT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: slack-token-secret
                  key: SLACK_BOT_TOKEN
            - name: ARGOCD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argocd-password
                  key: ARGOCD_PASSWORD
            - name: APP_NAME
              value: "my-test-app"
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "=========================="
              echo "PreSync Job: Using custom image with dependencies!"
              echo "=========================="

              source /opt/venv/bin/activate  

              echo "[INFO] Logging in to Argo CD server..."
              argocd login argocd-stone.demoapps.win \
                --username test \
                --password "$ARGOCD_PASSWORD" \
                --insecure \
                --grpc-web

              mkdir -p "/tmp/presync/$APP_NAME"

              SIGNAL_FILE="/tmp/presync/$APP_NAME/approval_signal"
              EMAILS_FILE="/tmp/presync/$APP_NAME/approved_emails"
              MSG_METADATA="/tmp/presync/$APP_NAME/msg_metadata"
              export SIGNAL_FILE EMAILS_FILE MSG_METADATA

              if [ -z "$MSG_METADATA" ]; then
                echo "[ERROR] MSG_METADATA environment variable is not set!"
                exit 1
              fi

              echo "[INFO] Generating DIFF..."
              DIFF=$(argocd app diff "$APP_NAME" --refresh --exit-code=false || true)
              DIFF_FILE="/tmp/presync/$APP_NAME/diff.txt"
              echo "$DIFF" > "$DIFF_FILE"
              echo "[INFO] Diff saved to $DIFF_FILE"

              # Python script with two separate try: blocks
              cat <<'EOF' > /tmp/post_to_slack.py
              import os
              import sys
              from slack_sdk import WebClient
              from slack_sdk.errors import SlackApiError

              SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
              APP_NAME = os.getenv("APP_NAME", "unknown-app")
              MSG_METADATA = os.getenv("MSG_METADATA")
              DIFF_FILE = f"/tmp/presync/{APP_NAME}/diff.txt"

              if not os.path.isfile(DIFF_FILE):
                  print(f"[ERROR] Diff file not found: {DIFF_FILE}", file=sys.stderr)
                  sys.exit(1)

              if not MSG_METADATA:
                  print("[ERROR] MSG_METADATA is not set!", file=sys.stderr)
                  sys.exit(1)

              # Example channel name or ID. If using a private channel, invite the bot first.
              channel_for_approval = "#argo-cd"  
              channel_for_diff = "C087P4N117X"     

              client = WebClient(token=SLACK_BOT_TOKEN)

              posted_channel_id = None
              posted_ts = None

              # ========== STEP 1: POST APPROVE/REJECT MESSAGE ==========
              try:
                  approval_resp = client.chat_postMessage(
                      channel=channel_for_approval,
                      text=f"Deployment pending approval for - *{APP_NAME}*:slack:. Please approve or reject.",
                      blocks=[
                          {
                              "type": "section",
                              "text": {
                                  "type": "mrkdwn",
                                  "text": (
                                      f"Deployment pending approval for  - *{APP_NAME}*:slack:.\n"
                                      "Please click *Approve* or *Reject* below."
                                  )
                              }
                          },
                          {
                              "type": "actions",
                              "elements": [
                                  {
                                      "type": "button",
                                      "text": {"type": "plain_text", "text": "Approve"},
                                      "value": "approve_value",
                                      "action_id": "approve_button",
                                      "style": "primary"  # GREEN BUTTON
                                  },
                                  {
                                      "type": "button",
                                      "text": {"type": "plain_text", "text": "Reject"},
                                      "value": "reject_value",
                                      "action_id": "reject_button",
                                      "style": "danger"   # RED BUTTON
                                  }
                              ]
                          }
                      ]
                  )
                  posted_channel_id = approval_resp["channel"]
                  posted_ts = approval_resp["ts"]

                  # Save channel+ts to MSG_METADATA
                  with open(MSG_METADATA, "w") as f:
                      f.write(f"{posted_channel_id}||{posted_ts}")

                  print(f"[INFO] Slack approval message posted to {channel_for_approval}. channel_id={posted_channel_id}, ts={posted_ts}")

              except SlackApiError as e:
                  print(f"[ERROR] chat_postMessage failed: {e.response['error']}", file=sys.stderr)
                  sys.exit(1)

              # ========== STEP 2: UPLOAD DIFF FILE IN A SECOND MESSAGE ==========
              try:
                  upload_resp = client.files_upload_v2(
                      channel=channel_for_diff,
                      file=DIFF_FILE,
                      title=f"Diff for {APP_NAME}",
                      filename=f"diff-{APP_NAME}.txt",
                      initial_comment=f"Here is the diff for {APP_NAME} (sent as a separate message)."
                  )
                  files_list = upload_resp.get("files", [])
                  if not files_list:
                      print("[ERROR] Slack upload returned no files.", file=sys.stderr)
                      sys.exit(1)

                  file_id = files_list[0]["id"]
                  file_info = client.files_info(file=file_id)
                  file_link = file_info["file"]["permalink"]

                  print(f"[INFO] Diff file uploaded to {channel_for_diff}: {file_link}")

              except SlackApiError as e:
                  print(f"[ERROR] files_upload_v2 failed: {e.response['error']}", file=sys.stderr)
                  sys.exit(1)
              EOF

              echo "[INFO] Sending Slack messages in two separate steps..."
              python3 /tmp/post_to_slack.py

              echo "[INFO] Waiting for Slack approval/rejection..."
              TIMEOUT=100
              SECS=0
              while [ $SECS -lt $TIMEOUT ]; do
                if [ -f "$SIGNAL_FILE" ]; then
                  VAL=$(cat "$SIGNAL_FILE" | tr '[:upper:]' '[:lower:]')
                  if [ "$VAL" = "approve" ]; then
                    echo "[INFO] => APPROVED! Exiting 0 => ArgoCD continues."
                    exit 0
                  elif [ "$VAL" = "reject" ]; then
                    echo "[INFO] => REJECTED! Terminating the ArgoCD operation..."
                    argocd app terminate-op "$APP_NAME" --insecure --grpc-web
                    exit 1
                  else:
                    echo "[WARN] Unrecognized signal '$VAL'; ignoring..."
                  fi
                fi
                echo "[INFO] $(date) => Still waiting for Slack approval... ($SECS seconds elapsed)"
                sleep 5
                SECS=$((SECS+5))
              done

              echo "[INFO] TIMEOUT! No Slack response => Cancelling the ArgoCD operation..."
              argocd app terminate-op "$APP_NAME" --insecure --grpc-web

              # On timeout, update the Approve/Reject message to reflect cancellation
              cat <<'UPDATETIMEOUT' > /tmp/update_slack_timeout.py
              import os
              import sys
              from slack_sdk import WebClient
              from slack_sdk.errors import SlackApiError

              SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
              APP_NAME = os.getenv("APP_NAME", "unknown-app")
              MSG_METADATA = os.getenv("MSG_METADATA")

              if not MSG_METADATA:
                  print("[ERROR] MSG_METADATA is not set!", file=sys.stderr)
                  sys.exit(1)

              if not os.path.exists(MSG_METADATA):
                  print(f"[ERROR] Missing {MSG_METADATA} for Slack channel/ts", file=sys.stderr)
                  sys.exit(1)

              client = WebClient(token=SLACK_BOT_TOKEN)

              with open(MSG_METADATA, "r") as f:
                  line = f.read().strip()
              try:
                  channel_id, original_ts = line.split("||", 1)
              except ValueError:
                  print("[ERROR] Could not parse channel/ts from msg_metadata", file=sys.stderr)
                  sys.exit(1)

              try:
                  client.chat_update(
                      channel=channel_id,
                      ts=original_ts,
                      text=f"Deployment approval for *{APP_NAME}* has *timed out*. Cancelling...",
                      blocks=[]
                  )
                  print("[INFO] Timeout Slack message updated.")
              except SlackApiError as e:
                  print(f"[ERROR] {e.response['error']}", file=sys.stderr)
                  sys.exit(1)
              UPDATETIMEOUT

              python3 /tmp/update_slack_timeout.py

              echo "[INFO] Removing leftover files: /tmp/presync/$APP_NAME ..."
              rm -rf "/tmp/presync/$APP_NAME"

              echo "[INFO] Exiting with code 1 => Argo sees hook as failed."
              exit 1
{{- end }}












